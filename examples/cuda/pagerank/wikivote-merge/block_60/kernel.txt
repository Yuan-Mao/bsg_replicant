/work/global/zz546/bsg_bladerunner/bsg_replicant/cadenv.mk:53: [0;33mBSG MAKE WARN: Couldn't find bsg_cadenv. User must configure CAD Environment.[0m
/work/global/zz546/bsg_bladerunner/bsg_replicant/libraries/platforms/bigblade-vcs/execution.mk:55: warning: overriding recipe for target 'stats'
/work/global/zz546/bsg_bladerunner/bsg_replicant/examples/cuda/riscv.mk:406: warning: ignoring old recipe for target 'stats'
/work/global/zz546/bsg_bladerunner/bsg_manycore/software/riscv-tools//riscv-install/bin/riscv32-unknown-elf-dramfs-objdump -dS kernel.riscv

kernel.riscv:     file format elf32-littleriscv


Disassembly of section .text.dram:

00000000 <_start>:
  .space(8)

.section .crtbegin,"a"
  .globl _start
_start:
  li  x1, 0
   0:	00000093          	li	ra,0
  // li  x2, 0
  li  x3, 0
   4:	00000193          	li	gp,0
  li  x4, 0
   8:	00000213          	li	tp,0
  li  x5, 0
   c:	00000293          	li	t0,0
  li  x6, 0
  10:	00000313          	li	t1,0
  li  x7, 0
  14:	00000393          	li	t2,0
  li  x8, 0
  18:	00000413          	li	s0,0
  li  x9, 0
  1c:	00000493          	li	s1,0
  li  x10,0
  20:	00000513          	li	a0,0
  li  x11,0
  24:	00000593          	li	a1,0
  li  x12,0
  28:	00000613          	li	a2,0
  li  x13,0
  2c:	00000693          	li	a3,0
  li  x14,0
  30:	00000713          	li	a4,0
  li  x15,0
  34:	00000793          	li	a5,0
  li  x16,0
  38:	00000813          	li	a6,0
  li  x17,0
  3c:	00000893          	li	a7,0
  li  x18,0
  40:	00000913          	li	s2,0
  li  x19,0
  44:	00000993          	li	s3,0
  li  x20,0
  48:	00000a13          	li	s4,0
  li  x21,0
  4c:	00000a93          	li	s5,0
  li  x22,0
  50:	00000b13          	li	s6,0
  li  x23,0
  54:	00000b93          	li	s7,0
  li  x24,0
  58:	00000c13          	li	s8,0
  li  x25,0
  5c:	00000c93          	li	s9,0
  li  x26,0
  60:	00000d13          	li	s10,0
  li  x27,0
  64:	00000d93          	li	s11,0
  li  x28,0
  68:	00000e13          	li	t3,0
  li  x29,0
  6c:	00000e93          	li	t4,0
  li  x30,0
  70:	00000f13          	li	t5,0
  li  x31,0
  74:	00000f93          	li	t6,0
  # Enable FPU and clear fcsr.
  #
  # These are ignored by manycore hardware but might be
  # required by execution environments supporting 
  # exceptions (such as Spike).
  li t0, 0x00003000 # mstatus.FS
  78:	000032b7          	lui	t0,0x3
  csrs mstatus, t0 # enable FPU
  7c:	3002a073          	csrs	mstatus,t0
  fscsr x0
  80:	00301073          	fscsr	zero
  li t0, 0
  84:	00000293          	li	t0,0

  fcvt.s.w f0, x0 
  88:	d0007053          	fcvt.s.w	ft0,zero
  fcvt.s.w f1, x0 
  8c:	d00070d3          	fcvt.s.w	ft1,zero
  fcvt.s.w f2, x0 
  90:	d0007153          	fcvt.s.w	ft2,zero
  fcvt.s.w f3, x0 
  94:	d00071d3          	fcvt.s.w	ft3,zero
  fcvt.s.w f4, x0 
  98:	d0007253          	fcvt.s.w	ft4,zero
  fcvt.s.w f5, x0 
  9c:	d00072d3          	fcvt.s.w	ft5,zero
  fcvt.s.w f6, x0 
  a0:	d0007353          	fcvt.s.w	ft6,zero
  fcvt.s.w f7, x0 
  a4:	d00073d3          	fcvt.s.w	ft7,zero
  fcvt.s.w f8, x0 
  a8:	d0007453          	fcvt.s.w	fs0,zero
  fcvt.s.w f9, x0 
  ac:	d00074d3          	fcvt.s.w	fs1,zero
  fcvt.s.w f10,x0 
  b0:	d0007553          	fcvt.s.w	fa0,zero
  fcvt.s.w f11,x0 
  b4:	d00075d3          	fcvt.s.w	fa1,zero
  fcvt.s.w f12,x0 
  b8:	d0007653          	fcvt.s.w	fa2,zero
  fcvt.s.w f13,x0 
  bc:	d00076d3          	fcvt.s.w	fa3,zero
  fcvt.s.w f14,x0 
  c0:	d0007753          	fcvt.s.w	fa4,zero
  fcvt.s.w f15,x0 
  c4:	d00077d3          	fcvt.s.w	fa5,zero
  fcvt.s.w f16,x0 
  c8:	d0007853          	fcvt.s.w	fa6,zero
  fcvt.s.w f17,x0 
  cc:	d00078d3          	fcvt.s.w	fa7,zero
  fcvt.s.w f18,x0 
  d0:	d0007953          	fcvt.s.w	fs2,zero
  fcvt.s.w f19,x0 
  d4:	d00079d3          	fcvt.s.w	fs3,zero
  fcvt.s.w f20,x0 
  d8:	d0007a53          	fcvt.s.w	fs4,zero
  fcvt.s.w f21,x0 
  dc:	d0007ad3          	fcvt.s.w	fs5,zero
  fcvt.s.w f22,x0 
  e0:	d0007b53          	fcvt.s.w	fs6,zero
  fcvt.s.w f23,x0 
  e4:	d0007bd3          	fcvt.s.w	fs7,zero
  fcvt.s.w f24,x0 
  e8:	d0007c53          	fcvt.s.w	fs8,zero
  fcvt.s.w f25,x0 
  ec:	d0007cd3          	fcvt.s.w	fs9,zero
  fcvt.s.w f26,x0 
  f0:	d0007d53          	fcvt.s.w	fs10,zero
  fcvt.s.w f27,x0 
  f4:	d0007dd3          	fcvt.s.w	fs11,zero
  fcvt.s.w f28,x0 
  f8:	d0007e53          	fcvt.s.w	ft8,zero
  fcvt.s.w f29,x0 
  fc:	d0007ed3          	fcvt.s.w	ft9,zero
  fcvt.s.w f30,x0 
 100:	d0007f53          	fcvt.s.w	ft10,zero
  fcvt.s.w f31,x0 
 104:	d0007fd3          	fcvt.s.w	ft11,zero



  # initialize global pointer
  la gp, _gp
 108:	00000197          	auipc	gp,0x0
 10c:	70818193          	addi	gp,gp,1800 # 810 <_gp>

  la  tp, _bsg_data_end_addr + 63
 110:	0bf00213          	li	tp,191
 114:	fc027213          	andi	tp,tp,-64
  and tp, tp, -64
 118:	00001117          	auipc	sp,0x1

  # mbt: put stack at top of local memory
  # mbt fix for 4KB IMEM / 4KB DMEM
  la sp, _sp
 11c:	ee410113          	addi	sp,sp,-284 # ffc <_bsg_elf_stack_ptr>
 120:	5440006f          	j	664 <main>
  lw a1, -4(sp)    # argv
  li a2, 0         # envp = NULL
  call main
  tail exit
#else
  j main
 124:	0000006f          	j	124 <__dmem_end+0xa4>

00000128 <write_finish_signal>:
#endif

2:
  # Should never this point
  j 2b
 128:	03002283          	lw	t0,48(zero) # 30 <__bsg_id>



int write_finish_signal () 
{
  if (__bsg_id == 0) 
 12c:	00029863          	bnez	t0,13c <write_finish_signal+0x14>
  {
     int *signal_ptr = (int *) cuda_finish_signal_addr; 
     *signal_ptr = cuda_finish_signal_val;     
 130:	04802383          	lw	t2,72(zero) # 48 <cuda_finish_signal_addr>
 134:	04402503          	lw	a0,68(zero) # 44 <cuda_finish_signal_val>
 138:	00a3a023          	sw	a0,0(t2)
  }
}
 13c:	00008067          	ret

00000140 <_Z15recursive_rangeiiiiiPiS_>:

int __attribute__((section(".dram"))) start_idx[bsg_tiles_X * bsg_tiles_Y] = {0};
int __attribute__((section(".dram"))) end_idx[bsg_tiles_X * bsg_tiles_Y] = {0};

void recursive_range(int n, int e, int grain_size, int start, int end, int * idx, int * edge_index)
{
 140:	fd010113          	addi	sp,sp,-48
 144:	02112623          	sw	ra,44(sp)
 148:	02812423          	sw	s0,40(sp)
 14c:	02912223          	sw	s1,36(sp)
 150:	03212023          	sw	s2,32(sp)
 154:	01312e23          	sw	s3,28(sp)
 158:	01412c23          	sw	s4,24(sp)
 15c:	01512a23          	sw	s5,20(sp)
 160:	01612823          	sw	s6,16(sp)
 164:	01712623          	sw	s7,12(sp)
 168:	01812423          	sw	s8,8(sp)
 16c:	01912223          	sw	s9,4(sp)
 170:	00060413          	mv	s0,a2
 174:	00058a13          	mv	s4,a1
  if(*idx == bsg_tiles_X * bsg_tiles_Y)
 178:	0007a583          	lw	a1,0(a5)
 17c:	08000613          	li	a2,128
 180:	0ac58c63          	beq	a1,a2,238 <_Z15recursive_rangeiiiiiPiS_+0xf8>
 184:	00078993          	mv	s3,a5
 188:	00070913          	mv	s2,a4
 18c:	fff70b93          	addi	s7,a4,-1
    return;
  //bsg_printf("beginning of recursive call, idx: %i, start: %i, end: %i, grain size: %i, total vertices: %i\n", *idx, start, end, grain_size, n);
  if ((start == end-1) || ((edge_index[end] - edge_index[start]) < grain_size)){
 190:	06db8863          	beq	s7,a3,200 <_Z15recursive_rangeiiiiiPiS_+0xc0>
 194:	00080b13          	mv	s6,a6
 198:	00050a93          	mv	s5,a0
 19c:	00291513          	slli	a0,s2,0x2
 1a0:	00a80c33          	add	s8,a6,a0
 1a4:	08000c93          	li	s9,128
 1a8:	000c2503          	lw	a0,0(s8)
 1ac:	00269613          	slli	a2,a3,0x2
 1b0:	00cb0633          	add	a2,s6,a2
 1b4:	00062603          	lw	a2,0(a2)
 1b8:	40c50533          	sub	a0,a0,a2
 1bc:	04854063          	blt	a0,s0,1fc <_Z15recursive_rangeiiiiiPiS_+0xbc>
    start_idx[*idx] = start;
    end_idx[*idx] = end;
    *idx += 1;
  }
  else {
    recursive_range(n, e, grain_size, start, start + ((end-start) >> 1), idx, edge_index);
 1c0:	40d90533          	sub	a0,s2,a3
 1c4:	40155513          	srai	a0,a0,0x1
 1c8:	00d504b3          	add	s1,a0,a3
 1cc:	000a8513          	mv	a0,s5
 1d0:	000a0593          	mv	a1,s4
 1d4:	00040613          	mv	a2,s0
 1d8:	00048713          	mv	a4,s1
 1dc:	00098793          	mv	a5,s3
 1e0:	000b0813          	mv	a6,s6
 1e4:	f5dff0ef          	jal	ra,140 <_Z15recursive_rangeiiiiiPiS_>
  if(*idx == bsg_tiles_X * bsg_tiles_Y)
 1e8:	0009a583          	lw	a1,0(s3)
 1ec:	05958663          	beq	a1,s9,238 <_Z15recursive_rangeiiiiiPiS_+0xf8>
 1f0:	00048693          	mv	a3,s1
 1f4:	fa9b9ae3          	bne	s7,s1,1a8 <_Z15recursive_rangeiiiiiPiS_+0x68>
 1f8:	0080006f          	j	200 <_Z15recursive_rangeiiiiiPiS_+0xc0>
 1fc:	00068b93          	mv	s7,a3
    start_idx[*idx] = start;
 200:	81000537          	lui	a0,0x81000
 204:	0a050513          	addi	a0,a0,160 # 810000a0 <_bsg_dram_end_addr+0xfffffbf0>
 208:	00259593          	slli	a1,a1,0x2
 20c:	00a58533          	add	a0,a1,a0
 210:	01752023          	sw	s7,0(a0)
    end_idx[*idx] = end;
 214:	0009a503          	lw	a0,0(s3)
 218:	810005b7          	lui	a1,0x81000
 21c:	2a058593          	addi	a1,a1,672 # 810002a0 <_bsg_dram_end_addr+0xfffffdf0>
 220:	00251513          	slli	a0,a0,0x2
 224:	00b50533          	add	a0,a0,a1
 228:	01252023          	sw	s2,0(a0)
    *idx += 1;
 22c:	0009a503          	lw	a0,0(s3)
 230:	00150513          	addi	a0,a0,1
 234:	00a9a023          	sw	a0,0(s3)
    recursive_range(n, e, grain_size, start + ((end-start)>>1), end, idx, edge_index);
  }

}
 238:	00412c83          	lw	s9,4(sp)
 23c:	00812c03          	lw	s8,8(sp)
 240:	00c12b83          	lw	s7,12(sp)
 244:	01012b03          	lw	s6,16(sp)
 248:	01412a83          	lw	s5,20(sp)
 24c:	01812a03          	lw	s4,24(sp)
 250:	01c12983          	lw	s3,28(sp)
 254:	02012903          	lw	s2,32(sp)
 258:	02412483          	lw	s1,36(sp)
 25c:	02812403          	lw	s0,40(sp)
 260:	02c12083          	lw	ra,44(sp)
 264:	03010113          	addi	sp,sp,48
 268:	00008067          	ret

0000026c <pr_merge_all>:
__attribute__((section(".dram"))) float damp;
__attribute__((section(".dram"))) float beta_score;

__attribute__((section(".dram"))) std::atomic<int> workq;

extern "C" int __attribute__ ((noinline)) pr_merge_all(int bsg_attr_remote * bsg_attr_noalias in_indices, int bsg_attr_remote * bsg_attr_noalias in_neighbors, int bsg_attr_remote * bsg_attr_noalias out_degree, float bsg_attr_remote * bsg_attr_noalias old_rank, float bsg_attr_remote * bsg_attr_noalias new_rank, float bsg_attr_remote * bsg_attr_noalias contrib, float bsg_attr_remote * bsg_attr_noalias contrib_new, int V) {
 26c:	fc010113          	addi	sp,sp,-64
 270:	02112e23          	sw	ra,60(sp)
 274:	02812c23          	sw	s0,56(sp)
 278:	02912a23          	sw	s1,52(sp)
 27c:	03212823          	sw	s2,48(sp)
 280:	03312623          	sw	s3,44(sp)
 284:	03412423          	sw	s4,40(sp)
 288:	03512223          	sw	s5,36(sp)
 28c:	03612023          	sw	s6,32(sp)
 290:	01712e23          	sw	s7,28(sp)
 294:	01812c23          	sw	s8,24(sp)
 298:	01912a23          	sw	s9,20(sp)
 29c:	01a12823          	sw	s10,16(sp)
 2a0:	01b12623          	sw	s11,12(sp)
 2a4:	00088913          	mv	s2,a7
 2a8:	00080993          	mv	s3,a6
 2ac:	00078413          	mv	s0,a5
 2b0:	00068a13          	mv	s4,a3
 2b4:	00060b13          	mv	s6,a2
 2b8:	00058a93          	mv	s5,a1
 2bc:	00050d13          	mv	s10,a0
 2c0:	00100513          	li	a0,1
 * Initialize the tile-group barrier.
 * This function should only be called once for the lifetime of the tile-group.
 */
static inline void bsg_barrier_hw_tile_group_init()
{
    int sense = 1;
 2c4:	00a12423          	sw	a0,8(sp)
    // initalize csr
    int cfg = __cuda_barrier_cfg[1+__bsg_id];
 2c8:	03002583          	lw	a1,48(zero) # 30 <__bsg_id>
 2cc:	05802603          	lw	a2,88(zero) # 58 <__cuda_barrier_cfg>
 2d0:	00259593          	slli	a1,a1,0x2
 2d4:	00c585b3          	add	a1,a1,a2
 2d8:	0045a583          	lw	a1,4(a1)
 2dc:	00040637          	lui	a2,0x40
    asm volatile ("csrrw x0, 0xfc1, %0" : : "r" (cfg));
 2e0:	fc159073          	csrw	0xfc1,a1
    // reset Pi
    asm volatile ("csrrwi x0, 0xfc2, 0");
 2e4:	fc205073          	csrwi	0xfc2,0
    // sync with amoadd barrier
    bsg_barrier_amoadd(&__cuda_barrier_cfg[0], &sense);
 2e8:	05802503          	lw	a0,88(zero) # 58 <__cuda_barrier_cfg>
 2ec:	ff060493          	addi	s1,a2,-16 # 3fff0 <_bsg_elf_stack_ptr+0x3eff4>
 2f0:	00810593          	addi	a1,sp,8
 2f4:	304000ef          	jal	ra,5f8 <bsg_barrier_amoadd>
  bsg_barrier_hw_tile_group_init();
  int tag = 2; 
  bsg_cuda_print_stat_start(tag);
 2f8:	02802503          	lw	a0,40(zero) # 28 <__bsg_grp_org_y>
 2fc:	03402583          	lw	a1,52(zero) # 34 <__bsg_y>
 300:	00a58533          	add	a0,a1,a0
 304:	01851513          	slli	a0,a0,0x18
 308:	3f0006b7          	lui	a3,0x3f000
 30c:	02c02583          	lw	a1,44(zero) # 2c <__bsg_grp_org_x>
 310:	03802603          	lw	a2,56(zero) # 38 <__bsg_x>
 314:	00d57533          	and	a0,a0,a3
 318:	00b605b3          	add	a1,a2,a1
 31c:	01259593          	slli	a1,a1,0x12
 320:	00fc06b7          	lui	a3,0xfc0
 324:	01402603          	lw	a2,20(zero) # 14 <__bsg_tile_group_id>
 328:	00d5f5b3          	and	a1,a1,a3
 32c:	00461613          	slli	a2,a2,0x4
 330:	00912023          	sw	s1,0(sp)
 334:	00967633          	and	a2,a2,s1
 338:	00b56533          	or	a0,a0,a1
 33c:	00c56533          	or	a0,a0,a2
 340:	00256513          	ori	a0,a0,2
 344:	401015b7          	lui	a1,0x40101
 348:	d0a5a623          	sw	a0,-756(a1) # 40100d0c <_bsg_elf_dram_size+0x20100d0c>
      }

      _GLIBCXX_ALWAYS_INLINE __int_type
      fetch_add(__int_type __i,
		memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_i, __i, int(__m)); }
 34c:	81000537          	lui	a0,0x81000
 350:	4a850513          	addi	a0,a0,1192 # 810004a8 <_bsg_dram_end_addr+0xfffffff8>
 354:	00a00593          	li	a1,10
 358:	00a12223          	sw	a0,4(sp)
 35c:	00b52baf          	amoadd.w	s7,a1,(a0)
  int start = 0;
  int end = V;
  int length = end - start;
//  pr_dbg("Rows within block is %d, start is %d, and end is %d\n", rows_within_pod, start, end);
//    for (int id = start + __bsg_id; id < end; id = id + bsg_tiles_X * bsg_tiles_Y) {
  for(int id = workq.fetch_add(GRANULARITY_PULL, std::memory_order_relaxed); id < length; id = workq.fetch_add(GRANULARITY_PULL, std::memory_order_relaxed)) {
 360:	1f2bd463          	bge	s7,s2,548 <pr_merge_all+0x2dc>
 364:	81000537          	lui	a0,0x81000
 368:	4a452007          	flw	ft0,1188(a0) # 810004a4 <_bsg_dram_end_addr+0xfffffff4>
 36c:	81000537          	lui	a0,0x81000
 370:	4a052087          	flw	ft1,1184(a0) # 810004a0 <_bsg_dram_end_addr+0xfffffff0>
 374:	01000513          	li	a0,16
 378:	00052107          	flw	ft2,0(a0)
 37c:	018a8c93          	addi	s9,s5,24
 380:	0140006f          	j	394 <pr_merge_all+0x128>
 384:	00412503          	lw	a0,4(sp)
 388:	00a00593          	li	a1,10
 38c:	00b52baf          	amoadd.w	s7,a1,(a0)
 390:	1b2bdc63          	bge	s7,s2,548 <pr_merge_all+0x2dc>
    int stop = (id + GRANULARITY_PULL) > length ? length : (id + GRANULARITY_PULL);
 394:	00ab8513          	addi	a0,s7,10
 398:	00090d93          	mv	s11,s2
 39c:	00a94463          	blt	s2,a0,3a4 <pr_merge_all+0x138>
 3a0:	00050d93          	mv	s11,a0
    for (int d = start + id; d < start + stop; d++) {
 3a4:	ffbbd0e3          	bge	s7,s11,384 <pr_merge_all+0x118>
 3a8:	002b9513          	slli	a0,s7,0x2
 3ac:	00ad0533          	add	a0,s10,a0
      register float temp_new = 0.0;
      register float temp_old = old_rank[d];
      register float error = 0.0;
      register int first = in_indices[d];
 3b0:	00052683          	lw	a3,0(a0)
 3b4:	0280006f          	j	3dc <pr_merge_all+0x170>
        register int idx = in_neighbors[s];
        register float tmp = contrib[idx];
        temp_new = temp_new + tmp;
      }

      temp_new = beta_score + damp * temp_new;
 3b8:	1030f1d3          	fmul.s	ft3,ft1,ft3
 3bc:	0001f1d3          	fadd.s	ft3,ft3,ft0
      error = fabs(temp_new - temp_old);
      old_rank[d] = temp_new;
      contrib_new[d] = temp_new / od;           
 3c0:	d000f253          	fcvt.s.w	ft4,ra
      old_rank[d] = temp_new;
 3c4:	00352027          	fsw	ft3,0(a0)
      contrib_new[d] = temp_new / od;           
 3c8:	1841f1d3          	fdiv.s	ft3,ft3,ft4
 3cc:	01e98533          	add	a0,s3,t5
 3d0:	00352027          	fsw	ft3,0(a0)
      register int first = in_indices[d];
 3d4:	000f8693          	mv	a3,t6
    for (int d = start + id; d < start + stop; d++) {
 3d8:	fbbbd6e3          	bge	s7,s11,384 <pr_merge_all+0x118>
      register float temp_old = old_rank[d];
 3dc:	002b9f13          	slli	t5,s7,0x2
      register int last = in_indices[d+1];
 3e0:	001b8b93          	addi	s7,s7,1
 3e4:	002b9513          	slli	a0,s7,0x2
 3e8:	00ad0533          	add	a0,s10,a0
 3ec:	00052f83          	lw	t6,0(a0)
      register int od = out_degree[d];
 3f0:	01eb0533          	add	a0,s6,t5
 3f4:	00052083          	lw	ra,0(a0)
      for(; s <= last - 12; s = s + 12) {
 3f8:	ff4f8c13          	addi	s8,t6,-12
 3fc:	00dc5663          	bge	s8,a3,408 <pr_merge_all+0x19c>
 400:	202101d3          	fmv.s	ft3,ft2
 404:	10c0006f          	j	510 <pr_merge_all+0x2a4>
 408:	00269513          	slli	a0,a3,0x2
 40c:	00ac8533          	add	a0,s9,a0
 410:	202101d3          	fmv.s	ft3,ft2
        register int idx0 = in_neighbors[s];
 414:	fe852603          	lw	a2,-24(a0)
        register int idx1 = in_neighbors[s+1];
 418:	fec52803          	lw	a6,-20(a0)
        register int idx2 = in_neighbors[s+2];
 41c:	ff052883          	lw	a7,-16(a0)
        register int idx3 = in_neighbors[s+3];
 420:	ff452283          	lw	t0,-12(a0)
        register int idx4 = in_neighbors[s+4];
 424:	ff852303          	lw	t1,-8(a0)
        register int idx5 = in_neighbors[s+5];
 428:	ffc52383          	lw	t2,-4(a0)
        register int idx6 = in_neighbors[s+6];
 42c:	00052e03          	lw	t3,0(a0)
        register int idx7 = in_neighbors[s+7];
 430:	00452e83          	lw	t4,4(a0)
        register float tmp_0 = contrib[idx0];
 434:	00261613          	slli	a2,a2,0x2
 438:	00c40633          	add	a2,s0,a2
 43c:	00062207          	flw	ft4,0(a2)
        register int idx8 = in_neighbors[s+8];
 440:	00852603          	lw	a2,8(a0)
        register float tmp_1 = contrib[idx1];
 444:	00281593          	slli	a1,a6,0x2
 448:	00b405b3          	add	a1,s0,a1
 44c:	0005a287          	flw	ft5,0(a1)
        register int idx9 = in_neighbors[s+9];
 450:	00c52583          	lw	a1,12(a0)
        register float tmp_2 = contrib[idx2];
 454:	00289713          	slli	a4,a7,0x2
 458:	00e40733          	add	a4,s0,a4
 45c:	00072307          	flw	ft6,0(a4)
        register int idx10 = in_neighbors[s+10];
 460:	01052703          	lw	a4,16(a0)
        register float tmp_3 = contrib[idx3];
 464:	00229793          	slli	a5,t0,0x2
 468:	00f407b3          	add	a5,s0,a5
 46c:	0007a387          	flw	ft7,0(a5)
        register int idx11 = in_neighbors[s+11];
 470:	01452783          	lw	a5,20(a0)
        register float tmp_4 = contrib[idx4];
 474:	00231493          	slli	s1,t1,0x2
 478:	009404b3          	add	s1,s0,s1
 47c:	0004a507          	flw	fa0,0(s1)
        register float tmp_5 = contrib[idx5];
 480:	00239493          	slli	s1,t2,0x2
 484:	009404b3          	add	s1,s0,s1
 488:	0004a587          	flw	fa1,0(s1)
        temp_new = temp_new + tmp_0 + tmp_1 + tmp_2 + tmp_3
 48c:	003271d3          	fadd.s	ft3,ft4,ft3
        register float tmp_6 = contrib[idx6];
 490:	002e1493          	slli	s1,t3,0x2
 494:	009404b3          	add	s1,s0,s1
 498:	0004a207          	flw	ft4,0(s1)
        temp_new = temp_new + tmp_0 + tmp_1 + tmp_2 + tmp_3
 49c:	0051f1d3          	fadd.s	ft3,ft3,ft5
        register float tmp_7 = contrib[idx7];
 4a0:	002e9493          	slli	s1,t4,0x2
 4a4:	009404b3          	add	s1,s0,s1
 4a8:	0004a287          	flw	ft5,0(s1)
        temp_new = temp_new + tmp_0 + tmp_1 + tmp_2 + tmp_3
 4ac:	0061f1d3          	fadd.s	ft3,ft3,ft6
        register float tmp_8 = contrib[idx8];
 4b0:	00261613          	slli	a2,a2,0x2
 4b4:	00c40633          	add	a2,s0,a2
 4b8:	00062307          	flw	ft6,0(a2)
        temp_new = temp_new + tmp_0 + tmp_1 + tmp_2 + tmp_3
 4bc:	0071f1d3          	fadd.s	ft3,ft3,ft7
        register float tmp_9 = contrib[idx9];
 4c0:	00259593          	slli	a1,a1,0x2
 4c4:	00b405b3          	add	a1,s0,a1
 4c8:	0005a387          	flw	ft7,0(a1)
                    + tmp_4 + tmp_5 + tmp_6 + tmp_7
 4cc:	00a1f1d3          	fadd.s	ft3,ft3,fa0
        register float tmp_10 = contrib[idx10];
 4d0:	00271593          	slli	a1,a4,0x2
 4d4:	00b405b3          	add	a1,s0,a1
 4d8:	0005a507          	flw	fa0,0(a1)
                    + tmp_4 + tmp_5 + tmp_6 + tmp_7
 4dc:	00b1f1d3          	fadd.s	ft3,ft3,fa1
        register float tmp_11 = contrib[idx11];
 4e0:	00279593          	slli	a1,a5,0x2
 4e4:	00b405b3          	add	a1,s0,a1
 4e8:	0005a587          	flw	fa1,0(a1)
                    + tmp_4 + tmp_5 + tmp_6 + tmp_7
 4ec:	0041f1d3          	fadd.s	ft3,ft3,ft4
 4f0:	0051f1d3          	fadd.s	ft3,ft3,ft5
                    + tmp_8 + tmp_9 + tmp_10 + tmp_11; 
 4f4:	0061f1d3          	fadd.s	ft3,ft3,ft6
 4f8:	0071f1d3          	fadd.s	ft3,ft3,ft7
 4fc:	00a1f1d3          	fadd.s	ft3,ft3,fa0
 500:	00b1f1d3          	fadd.s	ft3,ft3,fa1
      for(; s <= last - 12; s = s + 12) {
 504:	00c68693          	addi	a3,a3,12 # fc000c <_bsg_elf_vcache_size+0xf4000c>
 508:	03050513          	addi	a0,a0,48
 50c:	f0dc54e3          	bge	s8,a3,414 <pr_merge_all+0x1a8>
 510:	01ea0533          	add	a0,s4,t5
 514:	ebf6d2e3          	bge	a3,t6,3b8 <pr_merge_all+0x14c>
      for(; s < last; s++) {
 518:	40df84b3          	sub	s1,t6,a3
 51c:	00269693          	slli	a3,a3,0x2
 520:	00da86b3          	add	a3,s5,a3
        register int idx = in_neighbors[s];
 524:	0006a583          	lw	a1,0(a3)
        register float tmp = contrib[idx];
 528:	00259593          	slli	a1,a1,0x2
 52c:	00b405b3          	add	a1,s0,a1
 530:	0005a207          	flw	ft4,0(a1)
        temp_new = temp_new + tmp;
 534:	003271d3          	fadd.s	ft3,ft4,ft3
      for(; s < last; s++) {
 538:	fff48493          	addi	s1,s1,-1
 53c:	00468693          	addi	a3,a3,4
 540:	fe0492e3          	bnez	s1,524 <pr_merge_all+0x2b8>
 544:	e75ff06f          	j	3b8 <pr_merge_all+0x14c>
    }
  }
  bsg_cuda_print_stat_end(tag);
 548:	02802503          	lw	a0,40(zero) # 28 <__bsg_grp_org_y>
 54c:	03402583          	lw	a1,52(zero) # 34 <__bsg_y>
 550:	00a58533          	add	a0,a1,a0
 554:	01851513          	slli	a0,a0,0x18
 558:	02c02583          	lw	a1,44(zero) # 2c <__bsg_grp_org_x>
 55c:	03802603          	lw	a2,56(zero) # 38 <__bsg_x>
 560:	3f0006b7          	lui	a3,0x3f000
 564:	00d57533          	and	a0,a0,a3
 568:	00b605b3          	add	a1,a2,a1
 56c:	01259593          	slli	a1,a1,0x12
 570:	01402603          	lw	a2,20(zero) # 14 <__bsg_tile_group_id>
 574:	00fc06b7          	lui	a3,0xfc0
 578:	00d5f5b3          	and	a1,a1,a3
 57c:	00461613          	slli	a2,a2,0x4
 580:	00012683          	lw	a3,0(sp)
 584:	00d67633          	and	a2,a2,a3
 588:	00b56533          	or	a0,a0,a1
 58c:	00c56533          	or	a0,a0,a2
 590:	400005b7          	lui	a1,0x40000
 594:	00258593          	addi	a1,a1,2 # 40000002 <_bsg_elf_dram_size+0x20000002>
 598:	00b56533          	or	a0,a0,a1
 59c:	401015b7          	lui	a1,0x40101
 5a0:	d0a5a623          	sw	a0,-756(a1) # 40100d0c <_bsg_elf_dram_size+0x20100d0c>

#else
#error Unsupported Compiler!
#endif

inline void bsg_fence()      { __asm__ __volatile__("fence" :::); }
 5a4:	0ff0000f          	fence

// Barrier Send
// Initiate the hw barrier by flipping the BAR PI register.
static inline void bsg_barsend()
{
  asm volatile (".word 0x1000000f");
 5a8:	1000000f          	0x1000000f
  bsg_fence();
  bsg_barrier_hw_tile_group_sync();
  return 0;
 5ac:	00000513          	li	a0,0

// Barrier Receive
// Wait for the barrier in progress to complete (until Pi==Po).
static inline void bsg_barrecv()
{
  asm volatile (".word 0x2000000f");
 5b0:	2000000f          	0x2000000f
 5b4:	00c12d83          	lw	s11,12(sp)
 5b8:	01012d03          	lw	s10,16(sp)
 5bc:	01412c83          	lw	s9,20(sp)
 5c0:	01812c03          	lw	s8,24(sp)
 5c4:	01c12b83          	lw	s7,28(sp)
 5c8:	02012b03          	lw	s6,32(sp)
 5cc:	02412a83          	lw	s5,36(sp)
 5d0:	02812a03          	lw	s4,40(sp)
 5d4:	02c12983          	lw	s3,44(sp)
 5d8:	03012903          	lw	s2,48(sp)
 5dc:	03412483          	lw	s1,52(sp)
 5e0:	03812403          	lw	s0,56(sp)
 5e4:	03c12083          	lw	ra,60(sp)
 5e8:	04010113          	addi	sp,sp,64
 5ec:	00008067          	ret

000005f0 <_GLOBAL__sub_I_kernel.cpp>:
bsg_barrier<bsg_tiles_X, bsg_tiles_Y> barrier;
 5f0:	06000513          	li	a0,96
 5f4:	1440006f          	j	738 <_ZN11bsg_barrierILi16ELi8EEC2Ev>

000005f8 <bsg_barrier_amoadd>:
  // t3 - wakeup val
  // t4 - y index
  // t5 - x index

  // send amoadd
  lw t0, 0(a1)
 5f8:	0005a283          	lw	t0,0(a1)
  amoadd.w t1, t0, 0(a0)
 5fc:	0055232f          	amoadd.w	t1,t0,(a0)

  
  // is sense -1 or +1?
  // set wakeup val
  sub t3, x0, t0
 600:	40500e33          	neg	t3,t0
 
  // set check val 
  blt x0, t0, bsg_barrier_amoadd_plus1
 604:	00504663          	bgtz	t0,610 <bsg_barrier_amoadd_plus1>

  // -1 case
  li t2, 1
 608:	00100393          	li	t2,1
  j bsg_barrier_amoadd_check
 60c:	0080006f          	j	614 <bsg_barrier_amoadd_check>

00000610 <bsg_barrier_amoadd_plus1>:

bsg_barrier_amoadd_plus1:
  // +1 case
  li t2, (bsg_tiles_X*bsg_tiles_Y)-1
 610:	07f00393          	li	t2,127

00000614 <bsg_barrier_amoadd_check>:

bsg_barrier_amoadd_check:
  bne t2, t1, bsg_barrier_amoadd_sleep
 614:	02639e63          	bne	t2,t1,650 <bsg_barrier_amoadd_sleep>

00000618 <bsg_barrier_amoadd_wakeup>:

bsg_barrier_amoadd_wakeup:
  li t4, bsg_tiles_Y-1
 618:	00700e93          	li	t4,7

0000061c <bsg_barrier_amoadd_wakeup_loop_y>:

bsg_barrier_amoadd_wakeup_loop_y:
  li t5, bsg_tiles_X-1
 61c:	00f00f13          	li	t5,15

00000620 <bsg_barrier_amoadd_wakeup_loop_x>:

bsg_barrier_amoadd_wakeup_loop_x:
  // calculate the tile-group addr for the sense val
  li t6, 0x20000000
 620:	20000fb7          	lui	t6,0x20000
  slli a2, t4, 24
 624:	018e9613          	slli	a2,t4,0x18
  add t6, t6, a2
 628:	00cf8fb3          	add	t6,t6,a2
  slli a2, t5, 18
 62c:	012f1613          	slli	a2,t5,0x12
  add t6, t6, a2
 630:	00cf8fb3          	add	t6,t6,a2
  add t6, t6, a1
 634:	00bf8fb3          	add	t6,t6,a1
  sw t3, 0(t6)
 638:	01cfa023          	sw	t3,0(t6) # 20000000 <_bsg_elf_dram_size>
  addi t5, t5, -1
 63c:	ffff0f13          	addi	t5,t5,-1
  bge t5, x0, bsg_barrier_amoadd_wakeup_loop_x
 640:	fe0f50e3          	bgez	t5,620 <bsg_barrier_amoadd_wakeup_loop_x>
  addi t4, t4, -1
 644:	fffe8e93          	addi	t4,t4,-1
  bge t4, x0, bsg_barrier_amoadd_wakeup_loop_y
 648:	fc0edae3          	bgez	t4,61c <bsg_barrier_amoadd_wakeup_loop_y>
  j bsg_barrier_amoadd_end
 64c:	0140006f          	j	660 <bsg_barrier_amoadd_end>

00000650 <bsg_barrier_amoadd_sleep>:


bsg_barrier_amoadd_sleep:
  lr.w t0, 0(a1)
 650:	1005a2af          	lr.w	t0,(a1)
  beq t3, t0, bsg_barrier_amoadd_end
 654:	005e0663          	beq	t3,t0,660 <bsg_barrier_amoadd_end>
  // we need to check this, in order to support the reservation
  // being cleared by a context switch
  lr.w.aq t0, 0(a1)
 658:	1405a2af          	lr.w.aq	t0,(a1)
  beq t3, t0, bsg_barrier_amoadd_sleep
 65c:	fe5e0ae3          	beq	t3,t0,650 <bsg_barrier_amoadd_sleep>

00000660 <bsg_barrier_amoadd_end>:


bsg_barrier_amoadd_end:
  ret
 660:	00008067          	ret

00000664 <main>:
#include "bsg_cuda_lite_runtime.h"


int main()
{
        __wait_until_valid_func();
 664:	04002283          	lw	t0,64(zero) # 40 <cuda_kernel_not_loaded_val>
 668:	05400413          	li	s0,84
 66c:	1004232f          	lr.w	t1,(s0)
 670:	00629463          	bne	t0,t1,678 <__init_param>
 674:	140422af          	lr.w.aq	t0,(s0)

00000678 <__init_param>:
 678:	05400293          	li	t0,84
 67c:	0002a483          	lw	s1,0(t0) # 3000 <_bsg_elf_stack_ptr+0x2004>
 680:	05000293          	li	t0,80
 684:	0002a903          	lw	s2,0(t0)
 688:	04c00293          	li	t0,76
 68c:	0002a983          	lw	s3,0(t0)
 690:	04800293          	li	t0,72
 694:	0002aa03          	lw	s4,0(t0)

00000698 <__load_argument>:
 698:	0009a503          	lw	a0,0(s3)
 69c:	0049a583          	lw	a1,4(s3)
 6a0:	0089a603          	lw	a2,8(s3)
 6a4:	00c9a683          	lw	a3,12(s3)
 6a8:	0109a703          	lw	a4,16(s3)
 6ac:	0149a783          	lw	a5,20(s3)
 6b0:	0189a803          	lw	a6,24(s3)
 6b4:	01c9a883          	lw	a7,28(s3)
 6b8:	00800293          	li	t0,8
 6bc:	0322de63          	bge	t0,s2,6f8 <__invoke_kernel>
 6c0:	ff890293          	addi	t0,s2,-8
 6c4:	00229293          	slli	t0,t0,0x2
 6c8:	40510133          	sub	sp,sp,t0
 6cc:	00800293          	li	t0,8
 6d0:	02000313          	li	t1,32
 6d4:	00000e13          	li	t3,0

000006d8 <__load_stack>:
 6d8:	013303b3          	add	t2,t1,s3
 6dc:	0003ae83          	lw	t4,0(t2)
 6e0:	002e0f33          	add	t5,t3,sp
 6e4:	01df2023          	sw	t4,0(t5)
 6e8:	00128293          	addi	t0,t0,1
 6ec:	00430313          	addi	t1,t1,4
 6f0:	004e0e13          	addi	t3,t3,4
 6f4:	ff22c2e3          	blt	t0,s2,6d8 <__load_stack>

000006f8 <__invoke_kernel>:
 6f8:	000480e7          	jalr	s1
 6fc:	00800293          	li	t0,8
 700:	0122d863          	bge	t0,s2,710 <__kernel_return>
 704:	ff890293          	addi	t0,s2,-8
 708:	00229293          	slli	t0,t0,0x2
 70c:	00510133          	add	sp,sp,t0

00000710 <__kernel_return>:
 710:	04002283          	lw	t0,64(zero) # 40 <cuda_kernel_not_loaded_val>
 714:	00542023          	sw	t0,0(s0)
  if (__bsg_id == 0) 
 718:	03002283          	lw	t0,48(zero) # 30 <__bsg_id>
 71c:	00029863          	bnez	t0,72c <__kernel_return+0x1c>
     *signal_ptr = cuda_finish_signal_val;     
 720:	04802383          	lw	t2,72(zero) # 48 <cuda_finish_signal_addr>
 724:	04402503          	lw	a0,68(zero) # 44 <cuda_finish_signal_val>
 728:	00a3a023          	sw	a0,0(t2)
 72c:	f39ff06f          	j	664 <main>
}
 730:	00000513          	li	a0,0
 734:	00008067          	ret

00000738 <_ZN11bsg_barrierILi16ELi8EEC2Ev>:

        // IF the location of _local_alsert and _done_list changes in
        // the linker sections (e.g. to DRAM, for some reason) they
        // MUST be initialized to 0 to work correctly.
        
    volatile unsigned int  _local_alert = 0;
 738:	00052023          	sw	zero,0(a0)
    volatile unsigned char _done_list[ BARRIER_X_DIM ] = {0};
 73c:	00050223          	sb	zero,4(a0)
 740:	000502a3          	sb	zero,5(a0)
 744:	00050323          	sb	zero,6(a0)
 748:	000503a3          	sb	zero,7(a0)
 74c:	00050423          	sb	zero,8(a0)
 750:	000504a3          	sb	zero,9(a0)
 754:	00050523          	sb	zero,10(a0)
 758:	000505a3          	sb	zero,11(a0)
 75c:	00050623          	sb	zero,12(a0)
 760:	000506a3          	sb	zero,13(a0)
 764:	00050723          	sb	zero,14(a0)
 768:	000507a3          	sb	zero,15(a0)
 76c:	00050823          	sb	zero,16(a0)
 770:	000508a3          	sb	zero,17(a0)
 774:	00050923          	sb	zero,18(a0)
 778:	000509a3          	sb	zero,19(a0)


    // Reinitializes the done_list to zero
    void reset() {
        for (int i = 0; i < BARRIER_X_DIM; i ++) {
            this->_done_list[i] = 0;
 77c:	00050223          	sb	zero,4(a0)
 780:	000502a3          	sb	zero,5(a0)
 784:	00050323          	sb	zero,6(a0)
 788:	000503a3          	sb	zero,7(a0)
 78c:	00050423          	sb	zero,8(a0)
 790:	000504a3          	sb	zero,9(a0)
 794:	00050523          	sb	zero,10(a0)
 798:	000505a3          	sb	zero,11(a0)
 79c:	00050623          	sb	zero,12(a0)
 7a0:	000506a3          	sb	zero,13(a0)
 7a4:	00050723          	sb	zero,14(a0)
 7a8:	000507a3          	sb	zero,15(a0)
 7ac:	00050823          	sb	zero,16(a0)
 7b0:	000508a3          	sb	zero,17(a0)
 7b4:	00050923          	sb	zero,18(a0)
 7b8:	000509a3          	sb	zero,19(a0)
        }
        _local_alert = 0;
 7bc:	00052023          	sw	zero,0(a0)

template <int BARRIER_Y_DIM>
class bsg_col_barrier {
private:

    volatile unsigned int  _local_alert = 0;
 7c0:	00052a23          	sw	zero,20(a0)
    volatile unsigned char _done_list[ BARRIER_Y_DIM ] = {0};
 7c4:	00050c23          	sb	zero,24(a0)
 7c8:	00050ca3          	sb	zero,25(a0)
 7cc:	00050d23          	sb	zero,26(a0)
 7d0:	00050da3          	sb	zero,27(a0)
 7d4:	00050e23          	sb	zero,28(a0)
 7d8:	00050ea3          	sb	zero,29(a0)
 7dc:	00050f23          	sb	zero,30(a0)
 7e0:	00050fa3          	sb	zero,31(a0)


    // Reinitializes the done_list to zero
    void reset() {
        for (int i = 0; i < BARRIER_Y_DIM; i ++) {
            this->_done_list[i] = 0;
 7e4:	00050c23          	sb	zero,24(a0)
 7e8:	00050ca3          	sb	zero,25(a0)
 7ec:	00050d23          	sb	zero,26(a0)
 7f0:	00050da3          	sb	zero,27(a0)
 7f4:	00050e23          	sb	zero,28(a0)
 7f8:	00050ea3          	sb	zero,29(a0)
 7fc:	00050f23          	sb	zero,30(a0)
 800:	00050fa3          	sb	zero,31(a0)
        }
        _local_alert = 0;
 804:	00052a23          	sw	zero,20(a0)
            this->_done_list[i] = 0;
 808:	00050223          	sb	zero,4(a0)
 80c:	000502a3          	sb	zero,5(a0)
 810:	00050323          	sb	zero,6(a0)
 814:	000503a3          	sb	zero,7(a0)
 818:	00050423          	sb	zero,8(a0)
 81c:	000504a3          	sb	zero,9(a0)
 820:	00050523          	sb	zero,10(a0)
 824:	000505a3          	sb	zero,11(a0)
 828:	00050623          	sb	zero,12(a0)
 82c:	000506a3          	sb	zero,13(a0)
 830:	00050723          	sb	zero,14(a0)
 834:	000507a3          	sb	zero,15(a0)
 838:	00050823          	sb	zero,16(a0)
 83c:	000508a3          	sb	zero,17(a0)
 840:	00050923          	sb	zero,18(a0)
 844:	000509a3          	sb	zero,19(a0)
        _local_alert = 0;
 848:	00052023          	sw	zero,0(a0)
            this->_done_list[i] = 0;
 84c:	00050c23          	sb	zero,24(a0)
 850:	00050ca3          	sb	zero,25(a0)
 854:	00050d23          	sb	zero,26(a0)
 858:	00050da3          	sb	zero,27(a0)
 85c:	00050e23          	sb	zero,28(a0)
 860:	00050ea3          	sb	zero,29(a0)
 864:	00050f23          	sb	zero,30(a0)
 868:	00050fa3          	sb	zero,31(a0)
        _local_alert = 0;
 86c:	00052a23          	sw	zero,20(a0)

    // Reset row and column barrier 
    bsg_barrier () {
        this->r_barrier.reset();
        this->c_barrier.reset();
    }
 870:	00008067          	ret

00000874 <__.text.dram_end>:
	...
